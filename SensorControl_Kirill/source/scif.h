/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     SensorIK
  * - <b>Project file</b>:     C:/ti/Bortnikov/workspace_v7/RKPS_RML_IR_Sense/Application/SensorControl_Kirill/AnalyseIK_20180801_9c013dc.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.0.0.324
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC1310, revision -, package QFN32 5x5 RHB
  * - <b>Created</b>:          2018-08-01 18:25:13.038
  * - <b>Computer</b>:         ELESTA-25
  * - <b>User</b>:             Vladimir Bortnikov
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - AnalyseIK:
  *     - <b>A: To ADC from IKOut</b>: DIO12
  *     - <b>A: BATTERY voltage ADC IN</b>: DIO7
  *     - <b>A: Ain thermosensor</b>: DIO13
  *     - <b>A: to ADC from LEDRED for light measurement</b>: DIO10
  *     - <b>O: PIR On pin by 0</b>: DIO4
  *     - <b>O: Key for thermistor divider</b>: DIO14
  *     - <b>O: Logical 0 for correct ADC from LEDREDAIN</b>: DIO0
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_analyse_ik AnalyseIK
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     SensorIK
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC1310
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN32_5X5_RHB

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// AnalyseIK: Task ID
#define SCIF_ANALYSE_IK_TASK_ID 0


/// AnalyseIK: 
#define SCIF_ANALYSE_IK_AP_IK_ALARM_FLAG 2
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_AP_IK_DISTURB_FLAG 1
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_AP_IK_SETUP_FLAG 128
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_AP_IK_TESTMODE_FLAG 64
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_BV_ADC_WINDOW_HIGH 2
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_BV_ADC_WINDOW_LOW 1
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_FLAG_PIR_OK 2
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_FLAG_UCP_OK 1
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_LIGHT_ACC_THRESHOLD 30
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_LIGHT_RESTORE_PERIOD 400
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_LIGHT_THRESHOLD 200
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_MINUS_ONE -1
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_OPAMP_AVERAGING_SAMPLES 128
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_OPAMP_TRANSIENT_PERIOD 11000
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PERIOD_1S 50
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PERIOD_5S 250
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_ALARM_TIME 125
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_AVERAGING_TIME 128
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_CP 2000
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_IDLE_PERIOD 400
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_NOISE_THRESHOLD 57
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_SENS 2
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_SLOPE_THRESHOLD 960
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_PIR_THRESHOLD 172
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_INIT 0
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_OPERATE_3 4
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_PIR_AVERAGE_1 2
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_SLEEP 5
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_WAIT_OP_TRANSIENT_0 1
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_STATE_WAIT_PIR_TRANSIENT_2 3
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_UINT16_MAX 65535
/// AnalyseIK: 
#define SCIF_ANALYSE_IK_ULED_BUF_SIZE 16
/// AnalyseIK I/O mapping: To ADC from IKOut
#define SCIF_ANALYSE_IK_DIO_A_IR_OUT 12
/// AnalyseIK I/O mapping: BATTERY voltage ADC IN
#define SCIF_ANALYSE_IK_DIO_A_BATTERY 7
/// AnalyseIK I/O mapping: Ain thermosensor
#define SCIF_ANALYSE_IK_DIO_A_TEMPERAT 13
/// AnalyseIK I/O mapping: to ADC from LEDRED for light measurement
#define SCIF_ANALYSE_IK_DIO_A_LED_RED_AIN 10
/// AnalyseIK I/O mapping: PIR On pin by 0
#define SCIF_ANALYSE_IK_DIO_O_PIR_OFF 4
/// AnalyseIK I/O mapping: Key for thermistor divider
#define SCIF_ANALYSE_IK_DIO_O_BT_ON_P 14
/// AnalyseIK I/O mapping: Logical 0 for correct ADC from LEDREDAIN
#define SCIF_ANALYSE_IK_DIO_O_LED_RED_0 0


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// AnalyseIK: Task configuration structure
typedef struct {
    uint16_t CntMinusOne;   ///< 
    uint16_t Uacc;          ///< 
    uint16_t Uledi;         ///< 
    uint16_t adcWindowHigh; ///< 
    uint16_t adcWindowLow;  ///< 
    uint16_t dUled;         ///< 
    uint16_t flags;         ///< 
} SCIF_ANALYSE_IK_CFG_T;


/// AnalyseIK: Task input data structure
typedef struct {
    uint16_t count;      ///< 
    uint16_t isArmed;    ///< 
    uint16_t isLogMode;  ///< 
    uint16_t isTestMode; ///< 
} SCIF_ANALYSE_IK_INPUT_T;


/// AnalyseIK: Task output data structure
typedef struct {
    uint16_t LightThrCounter10; ///< 
    uint16_t PirPulseCounter;   ///< 
    uint16_t Uledi;             ///< 
    uint16_t Uph;               ///< 
    uint16_t Upirav;            ///< 
    uint16_t Upiri;             ///< 
    uint16_t Upl;               ///< 
    uint16_t dUled;             ///< 
} SCIF_ANALYSE_IK_OUTPUT_T;


/// AnalyseIK: Task state structure
typedef struct {
    uint16_t Downtimer;           ///< 
    uint16_t DowntimerRun;        ///< 
    uint16_t IKstate;             ///< 
    uint16_t LightThrCounter;     ///< 
    uint16_t PirAveragingSamples; ///< 
    uint16_t PirOutOfPipe;        ///< 
    int16_t  PirPulseCounter;     ///< 
    uint16_t PirPulsePresense;    ///< 
    uint16_t Uacch;               ///< 
    uint16_t Uaccl;               ///< 
    uint16_t Ubat;                ///< 
    uint16_t Ucp;                 ///< 
    uint16_t Uledi;               ///< 
    uint16_t Uledidx;             ///< 
    uint16_t Uledmax;             ///< 
    uint16_t Uledmin;             ///< 
    uint16_t Uph;                 ///< 
    uint16_t Upiri;               ///< 
    uint16_t Upiri1;              ///< 
    uint16_t Upiri2;              ///< 
    uint16_t Upl;                 ///< 
    uint16_t Ut;                  ///< 
    uint16_t aUled[16];           ///< 
    uint16_t absdU;               ///< 
    uint16_t absdU1;              ///< 
    uint16_t adcdowntimer;        ///< 
    uint16_t alarmdowntimer;      ///< 
    uint16_t alarmdowntimerrun;   ///< 
    uint16_t dUled;               ///< 
    int16_t  deltaU;              ///< 
    int16_t  deltaU1;             ///< 
    uint16_t idledowntimer;       ///< 
    uint16_t idledowntimerrun;    ///< 
    uint16_t lightdowntimer;      ///< 
    uint16_t lightdowntimerrun;   ///< 
    uint16_t maxUh;               ///< 
    uint16_t maxUl;               ///< 
    int16_t  maxslope;            ///< 
    int16_t  slope1;              ///< 
    int16_t  slope2;              ///< 
    uint16_t state;               ///< 
    uint16_t thrdowntimer;        ///< 
    uint16_t thrdowntimerrun;     ///< 
} SCIF_ANALYSE_IK_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_ANALYSE_IK_CFG_T cfg;
        SCIF_ANALYSE_IK_INPUT_T input;
        SCIF_ANALYSE_IK_OUTPUT_T output;
        SCIF_ANALYSE_IK_STATE_T state;
    } analyseIk;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00FE))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by ELESTA-25 at 2018-08-01 18:25:13.038

               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0083                         dw          #irSensor/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0086                         dw          #irSensor/execute
               pFwTaskTerminateFuncTable:
006a ---- 0126                         dw          #irSensor/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: IrSensor"
               irSensor/cfg:
               irSensor/cfg/lineHigh:
0075 ---- 08aa                         dw          #2218
               irSensor/cfg/lineLow:
0076 ---- 0756                         dw          #1878
               irSensor/input:
               irSensor/input/isLedIndication:
0077 ---- 0000                         dw          #0
               irSensor/input/isPirControl:
0078 ---- 0000                         dw          #0
               irSensor/input/lightLine:
0079 ---- 03e8                         dw          #1000
               irSensor/output:
               irSensor/output/battery:
007a ---- 0000                         dw          #0
               irSensor/output/forMcuEvent:
007b ---- 0000                         dw          #0
               irSensor/output/thermo:
007c ---- 0000                         dw          #0
               irSensor/state:
               irSensor/state/alarmState:
007d ---- 0000                         dw          #0
               irSensor/state/lastAlState:
007e ---- 0000                         dw          #0
               irSensor/state/ledAdc:
007f ---- 0000                         dw          #0
               irSensor/state/pirAdc:
0080 ---- 0800                         dw          #2048
               irSensor/state/timeCount:
0081 ---- 0000                         dw          #0
               irSensor/state/wait:
0082 ---- 0000                         dw          #0
               .segment end "Task: IrSensor"
               
               
               .segment begin "Task: IrSensor"
               irSensor/initialize:
               ;? fwScheduleTask(1);
0083 ---- 0001                         ld          R0, #1
0084 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               irSensor/initializeDone:
0085 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               irSensor/execute:
               ;? U16 t10S = 500;     //10S start time (500 for 20 ms step)
0086 ---- 01f4                         ld          R0, #500
               ;? U16 t30S = 1000;    // 10S indication time (1000 for 20 ms step)
0087 8603 13e8                         ld          R1, #1000
               ;? 
               ;? 
               ;? 
               ;? state.timeCount += 1;
0089 ---- 6881                         ld          R6, [#irSensor/state/timeCount]
008a ---- e801                         add         R6, #1
008b ---- 6c81                         st          R6, [#irSensor/state/timeCount]
               ;? 
               ;? // wake up every 20 ms, so 10 s is 10*50 = 500 counts
               ;? if(state.timeCount < t10S){
008c ---- 6881                         ld          R6, [#irSensor/state/timeCount]
008d ---- ed28                         cmp         R6, R0
008e ---- a601                         bgeu        /id0121
               ;?     // wait 10 S after power on
               ;? }else{
008f ---- 04d3                         jmp         /id0124
               /id0121:
               ;?     gpioClearOutput(AUXIO_O_PIR_ON);
0090 ---- 440f                             iobclr      #(8 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (8 >> 3))]
               ;?     adcEnableSync(ADC_REF_VDDS_REL, ADC_SAMPLE_TIME_21P3_US, ADC_TRIGGER_MANUAL);     // Vref = Vdd`
0091 ---- 7009                             ld          R7, #((8 | (((6 < 6) & (!8)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0092 ---- 1462                             jsr         AdiDdiAcquire
0093 ---- fb4d                             out         R7, [#IOP_ADISET_ADCREF]
0094 8609 7101                             ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0096 ---- 6431                             iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0126:
0097 ---- 2531                             iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0098 ---- a6fe                             biob0       /id0126
0099 ---- fb00                             out         R7, [#IOP_ANAIF_ADCCTL]
009a ---- 7078                             ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
009b ---- fb54                             out         R7, [#IOP_ADICLR_ADC]
009c ---- 7030                             ld          R7, #(6 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
009d ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
009e ---- 7003                             ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
009f ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00a0 ---- fd47                             nop         
00a1 ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00a2 ---- 1465                             jsr         AdiDdiRelease
               ;?     adcSelectGpioInput(AUXIO_A_PIR_AIN);
00a3 ---- 7002                             ld          R7, #2
00a4 ---- 1527                             jsr         AdccompbSelectGpioInput
               ;?     adcGenManualTrigger();
00a5 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(state.pirAdc);
00a6 ---- 601f                             ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00a7 ---- eb2c                             out         R6, [#IOP_EVCTL_SCEWEVSEL]
00a8 ---- fdb1                             wev1        #WEVSEL_PROG
00a9 ---- e902                             in          R6, [#IOP_ANAIF_ADCFIFO]
00aa ---- 6c80                             st          R6, [#irSensor/state/pirAdc]
               ;?     
               ;?     //            adcSelectGpioInput(AUXIO_A_LED_RED_AIN);
               ;?     //            adcGenManualTrigger();
               ;?     //            adcReadFifo(state.ledAdc);
               ;?     
               ;?     // Disable the ADC
               ;?     adcDisable();
00ab ---- 1534                             jsr         AdcDisable
               ;?     
               ;?     ifnot(state.wait == 1){
00ac ---- 6882                             ld          R6, [#irSensor/state/wait]
00ad ---- ea01                             cmp         R6, #1
00ae ---- b610                             beq         /id0135
               ;?         if(state.pirAdc < cfg.lineLow){
00af ---- 6880                                 ld          R6, [#irSensor/state/pirAdc]
00b0 ---- 7876                                 ld          R7, [#irSensor/cfg/lineLow]
00b1 ---- ed2f                                 cmp         R6, R7
00b2 ---- a603                                 bgeu        /id0137
               ;?             state.alarmState = 1;
00b3 ---- 6001                                     ld          R6, #1
00b4 ---- 6c7d                                     st          R6, [#irSensor/state/alarmState]
               ;?         }else if(state.pirAdc > cfg.lineHigh){
00b5 ---- 04bf                                 jmp         /id0140
               /id0137:
00b6 ---- 6880                                 ld          R6, [#irSensor/state/pirAdc]
00b7 ---- 7875                                 ld          R7, [#irSensor/cfg/lineHigh]
00b8 ---- ed2f                                 cmp         R6, R7
00b9 ---- 9e03                                 bleu        /id0142
               ;?             state.alarmState = 1;
00ba ---- 6001                                     ld          R6, #1
00bb ---- 6c7d                                     st          R6, [#irSensor/state/alarmState]
               ;?         }else{
00bc ---- 04bf                                 jmp         /id0145
               /id0142:
               ;?             state.alarmState = 0;
00bd ---- 6000                                     ld          R6, #0
00be ---- 6c7d                                     st          R6, [#irSensor/state/alarmState]
               ;?         }
               /id0145:
               /id0140:
               ;?     }
               /id0135:
               ;?     
               ;?     
               ;?     
               ;?     // if current state != the last state -> event to the main MCU
               ;?     ifnot(state.alarmState == state.lastAlState){
00bf ---- 687d                             ld          R6, [#irSensor/state/alarmState]
00c0 ---- 787e                             ld          R7, [#irSensor/state/lastAlState]
00c1 ---- ed2f                             cmp         R6, R7
00c2 ---- b60e                             beq         /id0148
               ;?         ifnot(state.wait == 1){
00c3 ---- 6882                                 ld          R6, [#irSensor/state/wait]
00c4 ---- ea01                                 cmp         R6, #1
00c5 ---- b60a                                 beq         /id0152
               ;?             state.lastAlState = state.alarmState;
00c6 ---- 687d                                     ld          R6, [#irSensor/state/alarmState]
00c7 ---- 6c7e                                     st          R6, [#irSensor/state/lastAlState]
               ;?             state.timeCount = t10S;
00c8 ---- 0c81                                     st          R0, [#irSensor/state/timeCount]
               ;?             output.forMcuEvent = 1;
00c9 ---- 6001                                     ld          R6, #1
00ca ---- 6c7b                                     st          R6, [#irSensor/output/forMcuEvent]
               ;?             if(state.alarmState == 1){
00cb ---- 687d                                     ld          R6, [#irSensor/state/alarmState]
00cc ---- ea01                                     cmp         R6, #1
00cd ---- be02                                     bneq        /id0157
               ;?                 state.wait = 1;
00ce ---- 6001                                         ld          R6, #1
00cf ---- 6c82                                         st          R6, [#irSensor/state/wait]
               ;?             }
               /id0157:
               ;?         }
               /id0152:
               ;?     }else{
00d0 ---- 04d3                             jmp         /id0151
               /id0148:
               ;?         output.forMcuEvent = 0;
00d1 ---- 6000                                 ld          R6, #0
00d2 ---- 6c7b                                 st          R6, [#irSensor/output/forMcuEvent]
               ;?     }
               /id0151:
               ;? }
               /id0124:
               ;? 
               ;? if(input.isLedIndication == 1){
00d3 ---- 6877                         ld          R6, [#irSensor/input/isLedIndication]
00d4 ---- ea01                         cmp         R6, #1
00d5 ---- be02                         bneq        /id0161
               ;?     state.wait = 0;
00d6 ---- 6000                             ld          R6, #0
00d7 ---- 6c82                             st          R6, [#irSensor/state/wait]
               ;? }
               /id0161:
               ;? 
               ;? // stop waiting for alarm msg to MCU
               ;? if(state.timeCount > t30S){
00d8 ---- 6881                         ld          R6, [#irSensor/state/timeCount]
00d9 ---- ed29                         cmp         R6, R1
00da ---- 9e0c                         bleu        /id0164
               ;?     if(state.wait == 1){
00db ---- 1882                             ld          R1, [#irSensor/state/wait]
00dc ---- 9a01                             cmp         R1, #1
00dd ---- be09                             bneq        /id0167
               ;?         
               ;?         state.wait = 0;
00de ---- 1000                                 ld          R1, #0
00df ---- 1c82                                 st          R1, [#irSensor/state/wait]
               ;?         state.alarmState = 0;
00e0 ---- 1000                                 ld          R1, #0
00e1 ---- 1c7d                                 st          R1, [#irSensor/state/alarmState]
               ;?         state.lastAlState = 0;
00e2 ---- 1000                                 ld          R1, #0
00e3 ---- 1c7e                                 st          R1, [#irSensor/state/lastAlState]
               ;?         state.timeCount = t10S;
00e4 ---- 0c81                                 st          R0, [#irSensor/state/timeCount]
               ;?         output.forMcuEvent = 1;
00e5 ---- 1001                                 ld          R1, #1
00e6 ---- 1c7b                                 st          R1, [#irSensor/output/forMcuEvent]
               ;?     }
               /id0167:
               ;? }
               /id0164:
               ;? 
               ;? 
               ;? if(output.forMcuEvent == 1){
00e7 ---- 187b                         ld          R1, [#irSensor/output/forMcuEvent]
00e8 ---- 9a01                         cmp         R1, #1
00e9 ---- be04                         bneq        /id0174
               ;?     fwGenAlertInterrupt();
00ea ---- 186c                             ld          R1, [#fwCtrlInt/bvTaskIoAlert]
00eb ---- 9201                             or          R1, #(1 << 0)
00ec ---- 1c6c                             st          R1, [#fwCtrlInt/bvTaskIoAlert]
               ;? }else{
00ed ---- 04f4                         jmp         /id0176
               /id0174:
               ;?     if(input.isPirControl == 1){
00ee ---- 1878                             ld          R1, [#irSensor/input/isPirControl]
00ef ---- 9a01                             cmp         R1, #1
00f0 ---- be03                             bneq        /id0178
               ;?         fwGenAlertInterrupt();
00f1 ---- 186c                                 ld          R1, [#fwCtrlInt/bvTaskIoAlert]
00f2 ---- 9201                                 or          R1, #(1 << 0)
00f3 ---- 1c6c                                 st          R1, [#fwCtrlInt/bvTaskIoAlert]
               ;?     }
               /id0178:
               ;? }
               /id0176:
               ;? 
               ;? //if(state.timeCount > t30S){          // 500+(50*30) = 2000
               ;? //    state.timeCount = t10S;
               ;? //    state.state = common;
               ;? //    state.alarm = 0;
               ;? //    fwGenAlertInterrupt();
               ;? //    }
               ;? 
               ;? if(state.timeCount > 0xFFF0){
00f4 ---- 1881                         ld          R1, [#irSensor/state/timeCount]
00f5 ---- 9af0                         cmp         R1, #-16
00f6 ---- 9e01                         bleu        /id0181
               ;?     state.timeCount = t10S;
00f7 ---- 0c81                             st          R0, [#irSensor/state/timeCount]
               ;? }
               /id0181:
               ;? 
               ;? 
               ;? if(state.timeCount == t10S){
00f8 ---- 1881                         ld          R1, [#irSensor/state/timeCount]
00f9 ---- 9d28                         cmp         R1, R0
00fa ---- be28                         bneq        /id0184
               ;?     gpioSetOutput(AUXIO_O_BT_P_ON);
00fb ---- 640e                             iobset      #(0 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (0 >> 3))]
               ;?     fwDelayUs(500, FW_DELAY_RANGE_1_MS);
00fc ---- 705e                             ld          R7, #(((500 * 24 ) + ((1 << 7) - 1)) >> 7)
00fd ---- 6007                             ld          R6, #7
00fe ---- 153f                             jsr         FwDelay
               ;?     
               ;?     adcEnableSync(ADC_REF_VDDS_REL, ADC_SAMPLE_TIME_21P3_US, ADC_TRIGGER_MANUAL);     // Vref = Vdd`
00ff ---- 7009                             ld          R7, #((8 | (((6 < 6) & (!8)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0100 ---- 1462                             jsr         AdiDdiAcquire
0101 ---- fb4d                             out         R7, [#IOP_ADISET_ADCREF]
0102 8609 7101                             ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0104 ---- 6431                             iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0190:
0105 ---- 2531                             iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0106 ---- a6fe                             biob0       /id0190
0107 ---- fb00                             out         R7, [#IOP_ANAIF_ADCCTL]
0108 ---- 7078                             ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0109 ---- fb54                             out         R7, [#IOP_ADICLR_ADC]
010a ---- 7030                             ld          R7, #(6 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
010b ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
010c ---- 7003                             ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
010d ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
010e ---- fd47                             nop         
010f ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
0110 ---- 1465                             jsr         AdiDdiRelease
               ;?     adcSelectGpioInput(AUXIO_A_BATTERY);
0111 ---- 7007                             ld          R7, #7
0112 ---- 1527                             jsr         AdccompbSelectGpioInput
               ;?     adcGenManualTrigger();
0113 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.battery);
0114 ---- 001f                             ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0115 ---- 8b2c                             out         R0, [#IOP_EVCTL_SCEWEVSEL]
0116 ---- fdb1                             wev1        #WEVSEL_PROG
0117 ---- 8902                             in          R0, [#IOP_ANAIF_ADCFIFO]
0118 ---- 0c7a                             st          R0, [#irSensor/output/battery]
               ;?     
               ;?     adcSelectGpioInput(AUXIO_A_TEMPERAT);
0119 ---- 7001                             ld          R7, #1
011a ---- 1527                             jsr         AdccompbSelectGpioInput
               ;?     adcGenManualTrigger();
011b ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.thermo);
011c ---- 001f                             ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
011d ---- 8b2c                             out         R0, [#IOP_EVCTL_SCEWEVSEL]
011e ---- fdb1                             wev1        #WEVSEL_PROG
011f ---- 8902                             in          R0, [#IOP_ANAIF_ADCFIFO]
0120 ---- 0c7c                             st          R0, [#irSensor/output/thermo]
               ;?     
               ;?     adcDisable();
0121 ---- 1534                             jsr         AdcDisable
               ;?     
               ;?     gpioClearOutput(AUXIO_O_BT_P_ON);
0122 ---- 440e                             iobclr      #(0 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (0 >> 3))]
               ;? }
               /id0184:
               ;? 
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
0123 ---- 0001                         ld          R0, #1
0124 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               irSensor/executeDone:
0125 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               irSensor/terminate:
               irSensor/terminateDone:
0126 ---- adb7                         rts         
               .segment end "Task: IrSensor"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
0127 ---- f007                         and         R7, #0x0007
               
                                       ; Disconnect all signals
0128 ---- 1462                         jsr         AdiDdiAcquire
0129 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
012b ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]
               
                                       ; Connect the specified GPIO
012c 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
012e ---- ed8f                         lsr         R6, R7
012f ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
               
                                       ; Ensure that it has taken effect
0130 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0131 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
0132 ---- 1465                         jsr         AdiDdiRelease
0133 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
0134 ---- 1462                         jsr         AdiDdiAcquire
0135 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
0136 ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]
               
                                       ; Assert reset and disable the ADC
0137 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
0138 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
               
                                       ; Ensure that it has taken effect
0139 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
013a ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
013b ---- 1465                         jsr         AdiDdiRelease
               
                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
013c ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               
                                       ; Disable the ADC data interface
013d ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]
               
013e ---- adb7                         rts
               
               
               
               
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
013f ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
0140 ---- eda4                         lsl         R6, #4
0141 ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
0142 ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
0143 ---- cdb1                         wev1        #WEVSEL_TIMER0
0144 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by ELESTA-25 at 2018-07-24 16:58:51.114
